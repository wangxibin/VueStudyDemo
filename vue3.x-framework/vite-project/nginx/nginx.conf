# user  nobody;
user  root;
#开启大线程数 一般与cpu核数一致
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#根据nginx安装位置不同会出现区别 指定进程id存放位置
pid        /etc/nginx/logs/nginx.pid;

events {
    #每个进程的最大连接数
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

	#开启高效文件传输模式
    sendfile        on;
    #tcp_nopush     on;
	#客户端连接活动的超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #微服务网关
    upstream apiserver{
        server 127.0.0.1:50101;
    }

    #虚拟server的配置
    server {
    	  #监听端口7776 前端页面的访问端口
        listen       7776;
        server_name  localhost;

        ssi on;
        ssi_silent_errors on;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #前端代码的位置（vue打包后dist文件在服务器的位置）
        root /root/nginx/html/test;

        # 设置允许跨域
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Headers *;
        add_header Access-Control-Allow-Methods *;

		    #7773相关的接口
        location /api {
            # $http_origin并不是nginx的内置参数，nginx支持取自定义的参数值，$http_xxx这个格式是nginx取请求中header的xxx的值，这里取的是
            # origin，而一般跨域请求都会将请求的来源放在origin中（浏览器会往跨域请求的header）
            # 如果需要使用cookie，后端想要获取前端携带过来的cookie，前后端都要做配置：前端自行百度，后端需要：
            # Access-Control-Allow-Origin http://www.abc.com（这里必须域名不能是*）;
            # Access-Control-Allow-Credentials true;
            # 这里使用变量 $http_origin取得当前来源域
            add_header 'Access-Control-Allow-Origin' $http_origin;
            # 为true的时候指请求时可带上Cookie
            add_header 'Access-Control-Allow-Credentials' 'true';
            # OPTIONS一定要有的，另外一般也就GET和POST，如果你有其它的也可加进去
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            # 这个要注意，里面一定要包含自定义的http头字段（就是说前端请求接口时，如果在http头里加了自定义的字段，这里配置一定要写上相应的字段）
            add_header 'Access-Control-Allow-Headers' 'DNT,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            # 因为浏览器判断是否允许跨域时会先往后端发一个 options 请求，然后根据返回的结果判断是否允许跨域请求，所以这里单独判断这个请求，然后直接返回
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            proxy_set_header Host $host;
            proxy_set_header X-Real-Ip $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5;
            #代理的服务端地址
            proxy_pass http://127.0.0.1:7773/;

        }
        #权限相关的接口
        location /pms {
            proxy_set_header Host $host;
            proxy_set_header X-Real-Ip $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_pass http://127.0.0.1:7771/pms/;
        }
        # 避免访问出现 404 错误
        location / {
            try_files $uri $uri/ @router;
            index  index.html;
        }
        location @router {
            rewrite ^.*$ /index.html last;
        }
        location = /index.html {
            add_header Cache-Control "no-cache, no-store";
        }
    }

    server {
      listen 80;
        server_name  localhost;

        #charset koi8-r;
        access_log  /var/log/nginx/host.access.log  main;
        error_log  /var/log/nginx/error.log  error;

        # 页面Nginx配置
        location / {
          # dist文件夹所在的目录
          # alias  D:/Z_lhy/SpringCloud/xuecheng_online/www/xc-ui-pc-static-portal/;
          root   /usr/share/nginx/html;
          index  index.html index.htm;
        }

        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
          root  /usr/share/nginx/html;
        }
    }
}


